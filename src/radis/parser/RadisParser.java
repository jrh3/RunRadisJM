/* The following code was generated by JFlex 1.7.0 */

/*
	RunRadisJM: Run RadiScript screens
	Copyright (C) 2009-2023  James Hahn

	This file is part of RunRadisJM.

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

/*
Generate via:
	jflex lexer.l
*/

package radis.parser;


import radis.Util;
import radis.op.*;

import java.io.IOException;
import java.util.HashMap;


/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>lexer.l</tt>
 */
public abstract class RadisParser {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int SKIP2NL = 2;
  public static final int DEFINITION = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2, 2
  };

  /**
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED =
    "\11\0\1\26\1\22\1\23\1\1\1\1\22\0\1\1\1\0\1\2"+
    "\2\0\1\25\1\64\1\0\1\53\1\54\1\61\1\60\1\65\1\11"+
    "\1\12\1\62\12\7\1\66\1\24\1\56\1\55\1\57\2\0\1\34"+
    "\1\32\1\43\1\15\1\10\1\16\1\46\1\50\1\20\1\13\1\36"+
    "\1\33\1\51\1\21\1\40\1\37\1\45\1\41\1\31\1\42\1\27"+
    "\1\44\1\47\1\52\2\13\1\3\1\0\1\4\1\63\1\14\1\0"+
    "\1\34\1\32\1\43\1\15\1\10\1\16\1\46\1\50\1\20\1\13"+
    "\1\36\1\33\1\51\1\21\1\40\1\37\1\45\1\41\1\31\1\42"+
    "\1\27\1\44\1\47\1\52\2\13\1\5\1\0\1\6\7\0\1\23"+
    "\252\0\2\17\115\0\1\30\u1ea8\0\1\23\1\23\u0100\0\1\35\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udee5\0";

  /**
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\1\1\1\3\1\4\1\5\3\4"+
    "\1\6\1\7\1\10\1\11\3\7\1\4\2\7\1\4"+
    "\1\7\1\4\4\7\1\4\10\7\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\2\0\1\26\5\0\1\27\2\7\1\0\1\7"+
    "\2\30\1\7\1\0\1\31\1\7\1\0\1\7\5\0"+
    "\12\7\1\0\3\7\1\0\4\7\1\32\2\7\1\0"+
    "\1\7\1\33\2\7\1\0\2\7\1\0\2\7\1\34"+
    "\1\35\1\36\2\0\1\37\1\0\1\40\1\11\1\0"+
    "\1\41\1\7\1\0\2\7\1\0\1\7\1\42\1\43"+
    "\1\0\1\7\1\0\1\7\1\44\1\0\1\45\1\46"+
    "\2\0\1\44\1\7\1\45\1\46\4\7\1\47\1\0"+
    "\1\7\1\50\1\51\1\0\1\7\2\52\1\7\1\0"+
    "\2\7\1\53\1\0\3\7\1\0\1\7\1\54\2\7"+
    "\1\0\2\7\1\55\1\56\1\55\1\56\1\7\1\57"+
    "\1\0\1\60\1\37\1\0\1\7\1\0\2\7\1\0"+
    "\1\7\1\0\1\7\2\61\1\62\1\63\1\0\1\62"+
    "\1\63\2\7\1\64\2\65\1\7\1\0\2\7\2\66"+
    "\1\0\1\7\1\0\3\7\1\0\3\7\2\67\1\0"+
    "\2\7\1\0\1\70\1\0\1\7\1\0\2\7\2\71"+
    "\1\0\1\7\2\72\2\73\1\7\1\0\2\7\1\0"+
    "\1\7\2\74\2\7\2\75\1\76\1\7\1\0\1\7"+
    "\1\77\1\100\2\101\1\0\2\7\2\102\1\7\1\0"+
    "\2\7\1\0\3\7\1\103\2\104\1\0\1\7\2\105"+
    "\1\7\1\0\1\7\1\106\1\0\1\7\1\107\1\110"+
    "\1\0\1\7\1\111\1\0\1\7\2\112\1\0\1\7"+
    "\2\113\2\114";

  private static int [] zzUnpackAction() {
    int [] result = new int[299];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\67\0\156\0\245\0\334\0\u0113\0\245\0\245"+
    "\0\u014a\0\u0181\0\u01b8\0\u01ef\0\u0226\0\u025d\0\245\0\u0294"+
    "\0\u02cb\0\u0302\0\u0339\0\u0370\0\u03a7\0\u03de\0\u0415\0\u044c"+
    "\0\u0483\0\u04ba\0\u04f1\0\u0528\0\u055f\0\u0596\0\u05cd\0\u0604"+
    "\0\u063b\0\u0672\0\u06a9\0\u06e0\0\u0717\0\u074e\0\245\0\245"+
    "\0\245\0\u0785\0\u07bc\0\245\0\245\0\245\0\245\0\245"+
    "\0\245\0\245\0\u07f3\0\u082a\0\245\0\u0861\0\u0898\0\u08cf"+
    "\0\u0906\0\u093d\0\245\0\u0974\0\u09ab\0\u09e2\0\u0a19\0\245"+
    "\0\u02cb\0\u0a50\0\u0415\0\245\0\u0a87\0\u0abe\0\u0af5\0\u0b2c"+
    "\0\u0b63\0\u0b9a\0\u0bd1\0\u0c08\0\u0c3f\0\u0c76\0\u0cad\0\u0ce4"+
    "\0\u0d1b\0\u0d52\0\u0d89\0\u0dc0\0\u0df7\0\u0e2e\0\u0e65\0\u0e9c"+
    "\0\u0ed3\0\u0f0a\0\u0f41\0\u0f78\0\u0faf\0\u0fe6\0\u101d\0\u02cb"+
    "\0\u1054\0\u108b\0\u10c2\0\u10f9\0\u1130\0\u1167\0\u119e\0\u11d5"+
    "\0\u120c\0\u1243\0\u127a\0\u12b1\0\u12e8\0\245\0\245\0\245"+
    "\0\u131f\0\u1356\0\245\0\u138d\0\u0906\0\u13c4\0\u13fb\0\u02cb"+
    "\0\u1432\0\u1469\0\u14a0\0\u14d7\0\u150e\0\u1545\0\u02cb\0\u02cb"+
    "\0\u157c\0\u15b3\0\u15ea\0\u1621\0\245\0\u1658\0\245\0\245"+
    "\0\u168f\0\u16c6\0\u02cb\0\u16fd\0\u02cb\0\u02cb\0\u1734\0\u176b"+
    "\0\u17a2\0\u17d9\0\u02cb\0\u1810\0\u1847\0\u187e\0\u02cb\0\u18b5"+
    "\0\u18ec\0\245\0\u02cb\0\u1923\0\u195a\0\u1991\0\u19c8\0\u02cb"+
    "\0\u19ff\0\u1a36\0\u1a6d\0\u1aa4\0\u1adb\0\u1b12\0\u02cb\0\u1b49"+
    "\0\u1b80\0\u1bb7\0\u1bee\0\u1c25\0\245\0\245\0\u02cb\0\u02cb"+
    "\0\u1c5c\0\u02cb\0\u1c93\0\245\0\u1cca\0\u1d01\0\u1d38\0\u1d6f"+
    "\0\u1da6\0\u1ddd\0\u1e14\0\u1e4b\0\u1e82\0\u1eb9\0\245\0\u02cb"+
    "\0\245\0\245\0\u1ef0\0\u02cb\0\u02cb\0\u1f27\0\u1f5e\0\u02cb"+
    "\0\245\0\u02cb\0\u1f95\0\u1fcc\0\u2003\0\u203a\0\245\0\u02cb"+
    "\0\u2071\0\u20a8\0\u20df\0\u2116\0\u214d\0\u2184\0\u21bb\0\u21f2"+
    "\0\u2229\0\u2260\0\245\0\u02cb\0\u2297\0\u22ce\0\u2305\0\u233c"+
    "\0\245\0\u2373\0\u23aa\0\u23e1\0\u2418\0\u244f\0\245\0\u02cb"+
    "\0\u2486\0\u24bd\0\245\0\u02cb\0\245\0\u02cb\0\u24f4\0\u252b"+
    "\0\u2562\0\u2599\0\u25d0\0\u2607\0\245\0\u02cb\0\u263e\0\u2675"+
    "\0\245\0\u02cb\0\u02cb\0\u26ac\0\u26e3\0\u271a\0\u02cb\0\245"+
    "\0\245\0\u02cb\0\u2751\0\u2788\0\u27bf\0\245\0\u02cb\0\u27f6"+
    "\0\u282d\0\u2864\0\u289b\0\u28d2\0\u2909\0\u2940\0\u2977\0\u02cb"+
    "\0\245\0\u02cb\0\u29ae\0\u29e5\0\245\0\u02cb\0\u2a1c\0\u2a53"+
    "\0\u2a8a\0\u02cb\0\u2ac1\0\u2af8\0\u02cb\0\u02cb\0\u2b2f\0\u2b66"+
    "\0\u02cb\0\u2b9d\0\u2bd4\0\245\0\u02cb\0\u2c0b\0\u2c42\0\245"+
    "\0\u02cb\0\245\0\u02cb";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[299];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\13\4\1\6\4\4\1\5\1\0\2\4"+
    "\1\5\40\4\22\2\1\7\44\2\1\10\1\11\1\12"+
    "\1\13\1\10\1\14\1\10\1\15\1\16\1\17\1\20"+
    "\1\21\1\10\1\22\1\23\1\24\1\25\1\26\1\11"+
    "\1\0\1\27\1\10\1\11\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\3\21\1\45\1\21\1\46\1\21\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60"+
    "\1\61\1\62\70\0\1\5\20\0\1\5\3\0\1\5"+
    "\50\0\1\63\57\0\1\11\20\0\1\11\3\0\1\11"+
    "\40\0\2\64\1\65\4\64\1\66\57\64\3\67\1\70"+
    "\1\0\15\67\1\0\3\67\1\0\40\67\4\71\1\0"+
    "\15\71\1\0\3\71\1\0\40\71\7\0\1\15\1\72"+
    "\1\0\1\20\12\0\1\73\50\0\2\21\2\0\4\21"+
    "\1\0\1\21\1\74\5\0\1\21\1\0\4\21\1\0"+
    "\15\21\23\0\1\20\1\72\14\0\1\73\50\0\2\21"+
    "\2\0\4\21\1\0\2\21\5\0\1\21\1\0\4\21"+
    "\1\0\15\21\23\0\1\21\1\75\2\0\4\21\1\0"+
    "\2\21\5\0\1\21\1\0\4\21\1\0\15\21\23\0"+
    "\2\21\2\0\4\21\1\76\1\77\1\21\5\0\1\21"+
    "\1\0\4\21\1\0\15\21\32\0\1\100\57\0\2\21"+
    "\2\0\3\21\1\101\1\0\2\21\5\0\1\21\1\0"+
    "\4\21\1\0\15\21\23\0\2\21\2\0\4\21\1\0"+
    "\2\21\5\0\1\21\1\0\4\21\1\0\2\21\1\102"+
    "\12\21\14\0\22\103\1\104\44\103\7\0\2\21\2\0"+
    "\4\21\1\0\1\21\1\105\5\0\1\21\1\106\1\107"+
    "\3\21\1\0\15\21\24\0\1\110\6\0\2\111\6\0"+
    "\1\112\10\0\1\113\2\0\1\114\32\0\1\21\1\115"+
    "\2\0\4\21\1\111\1\116\1\21\5\0\1\117\1\0"+
    "\4\21\1\0\2\21\1\120\2\21\1\121\7\21\23\0"+
    "\2\21\2\0\4\21\1\0\2\21\5\0\1\21\1\0"+
    "\2\21\1\122\1\21\1\0\15\21\23\0\1\21\1\123"+
    "\2\0\4\21\1\0\2\21\5\0\1\21\1\0\3\21"+
    "\1\124\1\0\15\21\23\0\2\21\2\0\2\21\1\125"+
    "\1\21\1\0\1\21\1\126\5\0\1\21\1\127\1\130"+
    "\1\131\2\21\1\0\6\21\1\132\6\21\24\0\1\133"+
    "\65\0\1\21\1\134\2\0\4\21\1\0\2\21\5\0"+
    "\1\21\1\0\4\21\1\0\15\21\23\0\2\21\2\0"+
    "\4\21\1\0\2\21\5\0\1\21\1\0\2\21\1\135"+
    "\1\136\1\0\3\21\1\137\11\21\23\0\2\21\2\0"+
    "\4\21\1\0\2\21\5\0\1\21\1\0\4\21\1\0"+
    "\3\21\1\140\2\21\1\141\6\21\23\0\1\21\1\142"+
    "\2\0\4\21\1\143\1\144\1\21\5\0\1\21\1\0"+
    "\4\21\1\0\15\21\23\0\2\21\2\0\4\21\1\0"+
    "\2\21\5\0\1\21\1\0\4\21\1\0\2\21\1\145"+
    "\12\21\23\0\2\21\2\0\4\21\1\0\2\21\5\0"+
    "\1\21\1\0\4\21\1\0\2\21\1\146\1\147\11\21"+
    "\23\0\2\21\2\0\4\21\1\150\1\151\1\21\5\0"+
    "\1\21\1\0\4\21\1\0\15\21\23\0\1\21\1\152"+
    "\2\0\4\21\1\153\1\154\1\21\5\0\1\21\1\0"+
    "\3\21\1\155\1\0\15\21\71\0\1\156\1\0\1\157"+
    "\64\0\1\160\27\0\1\161\50\0\2\64\1\65\66\64"+
    "\1\65\4\64\1\66\1\64\1\162\55\64\4\67\1\163"+
    "\15\67\1\0\3\67\1\0\40\67\4\164\1\163\15\164"+
    "\1\0\3\164\1\0\40\164\4\71\1\0\1\71\1\165"+
    "\13\71\1\0\3\71\1\0\40\71\7\0\1\166\1\0"+
    "\1\167\64\0\2\21\2\0\2\21\1\170\1\21\1\0"+
    "\2\21\5\0\1\21\1\0\4\21\1\0\15\21\23\0"+
    "\2\21\2\0\3\21\1\171\1\0\2\21\5\0\1\21"+
    "\1\172\1\173\1\174\2\21\1\0\15\21\55\0\1\175"+
    "\34\0\2\21\2\0\4\21\1\0\2\21\5\0\1\21"+
    "\1\0\4\21\1\0\3\21\1\176\11\21\23\0\2\21"+
    "\2\0\4\21\1\0\2\21\5\0\1\21\1\0\4\21"+
    "\1\0\4\21\1\177\4\21\1\200\3\21\23\0\2\21"+
    "\2\0\4\21\1\201\1\202\1\21\5\0\1\21\1\0"+
    "\4\21\1\0\15\21\24\0\1\203\65\0\1\21\1\204"+
    "\2\0\4\21\1\0\2\21\5\0\1\21\1\0\4\21"+
    "\1\0\15\21\56\0\1\205\72\0\1\206\71\0\1\207"+
    "\45\0\2\210\7\0\1\211\65\0\1\212\35\0\2\21"+
    "\2\0\4\21\1\0\2\21\5\0\1\21\1\0\4\21"+
    "\1\0\4\21\1\213\10\21\23\0\2\21\2\0\4\21"+
    "\1\0\2\21\5\0\1\21\1\0\4\21\1\0\10\21"+
    "\1\214\4\21\23\0\2\21\2\0\4\21\1\0\2\21"+
    "\5\0\1\21\1\0\4\21\1\0\13\21\1\215\1\21"+
    "\23\0\2\21\2\0\4\21\1\0\2\21\5\0\1\21"+
    "\1\210\1\216\3\21\1\0\3\21\1\217\11\21\23\0"+
    "\2\21\2\0\4\21\1\0\2\21\5\0\1\21\1\0"+
    "\4\21\1\0\2\21\1\220\12\21\23\0\2\21\2\0"+
    "\4\21\1\0\2\21\5\0\1\21\1\0\3\21\1\221"+
    "\1\0\15\21\23\0\2\21\2\0\3\21\1\222\1\0"+
    "\1\21\1\223\5\0\1\21\1\0\4\21\1\0\15\21"+
    "\23\0\2\21\2\0\4\21\1\0\2\21\5\0\1\21"+
    "\1\224\1\225\3\21\1\0\15\21\23\0\2\21\2\0"+
    "\2\21\1\226\1\21\1\0\2\21\5\0\1\21\1\0"+
    "\4\21\1\0\15\21\23\0\2\21\2\0\2\21\1\227"+
    "\1\21\1\0\2\21\5\0\1\21\1\0\4\21\1\0"+
    "\15\21\57\0\1\230\32\0\2\21\2\0\4\21\1\0"+
    "\2\21\5\0\1\21\1\0\4\21\1\0\5\21\1\231"+
    "\7\21\23\0\2\21\2\0\4\21\1\0\2\21\5\0"+
    "\1\21\1\232\1\233\3\21\1\0\15\21\23\0\1\21"+
    "\1\234\2\0\4\21\1\0\2\21\5\0\1\21\1\0"+
    "\4\21\1\0\15\21\24\0\1\235\65\0\1\21\1\236"+
    "\2\0\4\21\1\0\2\21\5\0\1\21\1\0\4\21"+
    "\1\0\15\21\23\0\2\21\2\0\4\21\1\0\2\21"+
    "\5\0\1\237\1\0\4\21\1\0\15\21\23\0\2\21"+
    "\2\0\2\21\1\240\1\21\1\0\2\21\5\0\1\21"+
    "\1\0\4\21\1\0\15\21\23\0\2\21\2\0\4\21"+
    "\1\241\1\242\1\21\5\0\1\21\1\0\4\21\1\0"+
    "\15\21\23\0\1\21\1\243\2\0\4\21\1\0\2\21"+
    "\5\0\1\21\1\0\4\21\1\0\15\21\23\0\2\21"+
    "\2\0\4\21\1\0\2\21\5\0\1\21\1\0\4\21"+
    "\1\0\1\21\1\244\13\21\62\0\1\245\27\0\2\21"+
    "\2\0\4\21\1\0\2\21\5\0\1\21\1\0\4\21"+
    "\1\0\10\21\1\246\4\21\23\0\2\21\2\0\4\21"+
    "\1\0\2\21\5\0\1\21\1\0\4\21\1\0\1\21"+
    "\1\247\13\21\23\0\2\21\2\0\4\21\1\0\2\21"+
    "\5\0\1\250\1\0\4\21\1\0\15\21\23\0\1\21"+
    "\1\251\2\0\4\21\1\0\2\21\5\0\1\21\1\0"+
    "\4\21\1\0\15\21\56\0\1\252\33\0\2\21\2\0"+
    "\4\21\1\0\2\21\5\0\1\21\1\0\4\21\1\0"+
    "\4\21\1\253\10\21\23\0\2\21\2\0\2\21\1\254"+
    "\1\21\1\0\2\21\5\0\1\21\1\0\4\21\1\0"+
    "\15\21\31\0\1\255\3\0\1\256\54\0\2\21\2\0"+
    "\2\21\1\257\1\21\1\0\1\21\1\260\5\0\1\21"+
    "\1\0\4\21\1\0\15\21\23\0\2\21\2\0\4\21"+
    "\1\0\2\21\5\0\1\21\1\0\4\21\1\0\4\21"+
    "\1\261\7\21\1\262\33\0\2\263\46\0\2\162\1\264"+
    "\64\162\4\164\1\265\15\164\1\0\3\164\1\0\40\164"+
    "\7\0\1\166\15\0\1\73\50\0\1\166\66\0\2\21"+
    "\2\0\4\21\1\266\1\267\1\21\5\0\1\21\1\0"+
    "\4\21\1\0\15\21\57\0\1\270\32\0\2\21\2\0"+
    "\4\21\1\0\2\21\5\0\1\21\1\0\4\21\1\0"+
    "\5\21\1\271\7\21\23\0\2\21\2\0\4\21\1\0"+
    "\2\21\5\0\1\21\1\0\2\21\1\272\1\21\1\0"+
    "\15\21\44\0\2\273\44\0\2\21\2\0\4\21\1\0"+
    "\2\21\5\0\1\21\1\273\1\274\3\21\1\0\15\21"+
    "\61\0\1\275\30\0\2\21\2\0\4\21\1\0\2\21"+
    "\5\0\1\21\1\0\4\21\1\0\7\21\1\276\5\21"+
    "\44\0\2\277\44\0\2\21\2\0\4\21\1\0\2\21"+
    "\5\0\1\21\1\277\1\300\3\21\1\0\15\21\35\0"+
    "\1\301\107\0\1\302\65\0\1\303\34\0\2\21\2\0"+
    "\4\21\1\0\1\21\1\304\5\0\1\21\1\0\4\21"+
    "\1\0\15\21\23\0\2\21\2\0\4\21\1\0\2\21"+
    "\5\0\1\21\1\0\4\21\1\0\4\21\1\305\10\21"+
    "\23\0\2\21\2\0\4\21\1\0\2\21\5\0\1\21"+
    "\1\0\4\21\1\0\3\21\1\306\11\21\23\0\2\21"+
    "\2\0\4\21\1\0\1\21\1\307\5\0\1\21\1\0"+
    "\4\21\1\0\15\21\23\0\2\21\2\0\4\21\1\0"+
    "\2\21\5\0\1\21\1\0\4\21\1\0\4\21\1\310"+
    "\10\21\56\0\1\311\33\0\2\21\2\0\4\21\1\0"+
    "\2\21\5\0\1\21\1\0\4\21\1\0\4\21\1\312"+
    "\10\21\23\0\2\21\2\0\4\21\1\0\1\21\1\313"+
    "\5\0\1\21\1\0\4\21\1\0\15\21\24\0\1\314"+
    "\65\0\1\21\1\315\2\0\4\21\1\0\2\21\5\0"+
    "\1\21\1\0\4\21\1\0\15\21\23\0\2\21\2\0"+
    "\4\21\1\0\2\21\5\0\1\21\1\0\4\21\1\0"+
    "\3\21\1\316\11\21\53\0\1\317\36\0\2\21\2\0"+
    "\4\21\1\0\2\21\5\0\1\21\1\0\4\21\1\0"+
    "\1\21\1\320\13\21\23\0\2\21\2\0\4\21\1\0"+
    "\2\21\5\0\1\21\1\321\1\322\3\21\1\0\15\21"+
    "\35\0\1\323\54\0\2\21\2\0\4\21\1\0\1\21"+
    "\1\324\5\0\1\21\1\0\4\21\1\0\15\21\23\0"+
    "\2\21\2\0\4\21\1\0\2\21\5\0\1\21\1\0"+
    "\4\21\1\0\3\21\1\325\11\21\23\0\2\21\2\0"+
    "\4\21\1\0\2\21\5\0\1\21\1\0\2\21\1\326"+
    "\1\21\1\0\15\21\64\0\1\327\25\0\2\21\2\0"+
    "\4\21\1\0\2\21\5\0\1\21\1\0\4\21\1\0"+
    "\12\21\1\330\2\21\23\0\2\21\2\0\4\21\1\0"+
    "\1\21\1\331\5\0\1\21\1\0\4\21\1\0\15\21"+
    "\23\0\2\21\2\0\4\21\1\0\2\21\5\0\1\21"+
    "\1\0\3\21\1\332\1\0\15\21\64\0\1\333\25\0"+
    "\2\21\2\0\4\21\1\0\2\21\5\0\1\21\1\0"+
    "\4\21\1\0\12\21\1\334\2\21\23\0\2\21\2\0"+
    "\4\21\1\335\1\336\1\21\5\0\1\21\1\0\4\21"+
    "\1\0\15\21\23\0\2\21\2\0\4\21\1\0\2\21"+
    "\5\0\1\21\1\0\4\21\1\0\5\21\1\337\7\21"+
    "\35\0\1\340\51\0\1\341\103\0\1\342\54\0\2\21"+
    "\2\0\4\21\1\0\1\21\1\343\5\0\1\21\1\0"+
    "\4\21\1\0\15\21\24\0\1\344\65\0\1\21\1\345"+
    "\2\0\4\21\1\0\2\21\5\0\1\21\1\0\4\21"+
    "\1\0\15\21\23\0\2\21\2\0\4\21\1\0\2\21"+
    "\5\0\1\21\1\0\3\21\1\346\1\0\15\21\56\0"+
    "\1\347\33\0\2\21\2\0\4\21\1\0\2\21\5\0"+
    "\1\21\1\0\4\21\1\0\4\21\1\350\10\21\43\0"+
    "\1\351\46\0\2\21\2\0\4\21\1\0\2\21\5\0"+
    "\1\352\1\0\4\21\1\0\15\21\24\0\1\353\65\0"+
    "\1\21\1\354\2\0\4\21\1\0\2\21\5\0\1\21"+
    "\1\0\4\21\1\0\15\21\23\0\2\21\2\0\4\21"+
    "\1\0\2\21\5\0\1\21\1\0\4\21\1\355\1\356"+
    "\14\21\23\0\2\21\2\0\4\21\1\0\2\21\5\0"+
    "\1\21\1\0\4\21\1\0\2\21\1\357\12\21\35\0"+
    "\1\360\54\0\2\21\2\0\4\21\1\0\1\21\1\361"+
    "\5\0\1\21\1\0\4\21\1\0\15\21\23\0\2\21"+
    "\2\0\4\21\1\0\2\21\5\0\1\21\1\0\3\21"+
    "\1\362\1\0\15\21\56\0\1\363\33\0\2\21\2\0"+
    "\4\21\1\0\2\21\5\0\1\21\1\0\4\21\1\0"+
    "\4\21\1\364\10\21\56\0\1\365\33\0\2\21\2\0"+
    "\4\21\1\0\2\21\5\0\1\21\1\0\4\21\1\0"+
    "\4\21\1\366\10\21\23\0\2\21\2\0\4\21\1\0"+
    "\2\21\5\0\1\21\1\0\2\21\1\367\1\21\1\0"+
    "\15\21\23\0\2\21\2\0\4\21\1\0\2\21\5\0"+
    "\1\21\1\0\3\21\1\370\1\0\15\21\56\0\1\371"+
    "\33\0\2\21\2\0\4\21\1\0\2\21\5\0\1\21"+
    "\1\0\4\21\1\0\4\21\1\372\10\21\23\0\2\21"+
    "\2\0\4\21\1\0\2\21\5\0\1\21\1\0\4\21"+
    "\1\0\4\21\1\373\10\21\23\0\2\21\2\0\4\21"+
    "\1\0\2\21\5\0\1\21\1\0\4\21\1\0\4\21"+
    "\1\374\10\21\50\0\1\375\41\0\2\21\2\0\4\21"+
    "\1\0\2\21\5\0\1\21\1\0\3\21\1\376\1\0"+
    "\15\21\23\0\2\21\2\0\4\21\1\0\2\21\5\0"+
    "\1\21\1\0\4\21\1\0\12\21\1\377\2\21\24\0"+
    "\1\u0100\66\0\1\u0101\65\0\1\21\1\u0102\2\0\4\21"+
    "\1\0\2\21\5\0\1\21\1\0\4\21\1\0\15\21"+
    "\35\0\1\u0103\54\0\2\21\2\0\4\21\1\0\1\21"+
    "\1\u0104\5\0\1\21\1\0\4\21\1\0\15\21\23\0"+
    "\2\21\2\0\4\21\1\0\1\21\1\u0105\5\0\1\21"+
    "\1\0\4\21\1\0\15\21\24\0\1\u0106\65\0\1\21"+
    "\1\u0107\2\0\4\21\1\0\2\21\5\0\1\21\1\0"+
    "\4\21\1\0\15\21\23\0\2\21\2\0\4\21\1\0"+
    "\2\21\5\0\1\21\1\0\4\21\1\0\1\21\1\u0108"+
    "\13\21\31\0\1\u0109\60\0\2\21\2\0\2\21\1\u010a"+
    "\1\21\1\0\2\21\5\0\1\21\1\0\4\21\1\0"+
    "\15\21\23\0\2\21\2\0\4\21\1\0\2\21\5\0"+
    "\1\21\1\0\4\21\1\0\10\21\1\u010b\4\21\33\0"+
    "\2\u010c\55\0\2\21\2\0\4\21\1\u010c\1\u010d\1\21"+
    "\5\0\1\21\1\0\4\21\1\0\15\21\23\0\2\21"+
    "\2\0\4\21\1\0\2\21\5\0\1\21\1\0\3\21"+
    "\1\u010e\1\0\15\21\23\0\2\21\2\0\4\21\1\0"+
    "\2\21\5\0\1\21\1\0\4\21\1\0\5\21\1\u010f"+
    "\7\21\23\0\1\21\1\u0110\2\0\4\21\1\0\2\21"+
    "\5\0\1\21\1\0\4\21\1\0\15\21\35\0\1\u0111"+
    "\54\0\2\21\2\0\4\21\1\0\1\21\1\u0112\5\0"+
    "\1\21\1\0\4\21\1\0\15\21\31\0\1\u0113\60\0"+
    "\2\21\2\0\2\21\1\u0114\1\21\1\0\2\21\5\0"+
    "\1\21\1\0\4\21\1\0\15\21\23\0\2\21\2\0"+
    "\4\21\1\0\2\21\5\0\1\21\1\0\4\21\1\u0115"+
    "\1\u0116\14\21\23\0\2\21\2\0\4\21\1\0\2\21"+
    "\5\0\1\21\1\0\3\21\1\u0117\1\0\15\21\33\0"+
    "\2\u0118\55\0\2\21\2\0\4\21\1\u0118\1\u0119\1\21"+
    "\5\0\1\21\1\0\4\21\1\0\15\21\23\0\1\21"+
    "\1\u011a\2\0\4\21\1\0\2\21\5\0\1\21\1\0"+
    "\4\21\1\0\15\21\24\0\1\u011b\65\0\1\21\1\u011c"+
    "\2\0\4\21\1\0\2\21\5\0\1\21\1\0\4\21"+
    "\1\0\15\21\23\0\2\21\2\0\4\21\1\0\2\21"+
    "\5\0\1\21\1\0\4\21\1\0\1\21\1\u011d\13\21"+
    "\23\0\1\21\1\u011e\2\0\4\21\1\0\2\21\5\0"+
    "\1\21\1\0\4\21\1\0\15\21\33\0\2\u011f\55\0"+
    "\2\21\2\0\4\21\1\u011f\1\u0120\1\21\5\0\1\21"+
    "\1\0\4\21\1\0\15\21\23\0\2\21\2\0\2\21"+
    "\1\u0121\1\21\1\0\2\21\5\0\1\21\1\0\4\21"+
    "\1\0\15\21\35\0\1\u0122\54\0\2\21\2\0\4\21"+
    "\1\0\1\21\1\u0123\5\0\1\21\1\0\4\21\1\0"+
    "\15\21\44\0\2\u0124\44\0\2\21\2\0\4\21\1\0"+
    "\2\21\5\0\1\21\1\u0124\1\u0125\3\21\1\0\15\21"+
    "\35\0\1\u0126\54\0\2\21\2\0\4\21\1\0\1\21"+
    "\1\u0127\5\0\1\21\1\0\4\21\1\0\15\21\62\0"+
    "\1\u0128\27\0\2\21\2\0\4\21\1\0\2\21\5\0"+
    "\1\21\1\0\4\21\1\0\10\21\1\u0129\4\21\62\0"+
    "\1\u012a\27\0\2\21\2\0\4\21\1\0\2\21\5\0"+
    "\1\21\1\0\4\21\1\0\10\21\1\u012b\4\21\14\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[11385];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\2\1\2\11\6\1\1\11\27\1\3\11"+
    "\2\1\7\11\2\0\1\11\5\0\1\11\2\1\1\0"+
    "\1\1\1\11\2\1\1\0\1\11\1\1\1\0\1\1"+
    "\5\0\12\1\1\0\3\1\1\0\7\1\1\0\4\1"+
    "\1\0\2\1\1\0\2\1\3\11\2\0\1\11\1\0"+
    "\2\1\1\0\2\1\1\0\2\1\1\0\3\1\1\0"+
    "\1\1\1\0\1\1\1\11\1\0\2\11\2\0\11\1"+
    "\1\0\3\1\1\0\1\1\1\11\2\1\1\0\3\1"+
    "\1\0\3\1\1\0\4\1\1\0\2\1\2\11\4\1"+
    "\1\0\1\11\1\1\1\0\1\1\1\0\2\1\1\0"+
    "\1\1\1\0\1\1\1\11\1\1\2\11\1\0\5\1"+
    "\1\11\2\1\1\0\2\1\1\11\1\1\1\0\1\1"+
    "\1\0\3\1\1\0\3\1\1\11\1\1\1\0\2\1"+
    "\1\0\1\11\1\0\1\1\1\0\2\1\1\11\1\1"+
    "\1\0\1\1\1\11\1\1\1\11\2\1\1\0\2\1"+
    "\1\0\1\1\1\11\3\1\1\11\3\1\1\0\2\1"+
    "\2\11\1\1\1\0\2\1\1\11\2\1\1\0\2\1"+
    "\1\0\4\1\1\11\1\1\1\0\1\1\1\11\2\1"+
    "\1\0\2\1\1\0\3\1\1\0\2\1\1\0\1\1"+
    "\1\11\1\1\1\0\1\1\1\11\1\1\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[299];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the
   * matched text
   */
  private int yycolumn;

  /**
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /**
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
	static final HashMap<String,OpItem> specialVarTbl
					= new HashMap<String,OpItem>(53);


	/**
	Adds an entry to the specialVarTbl.
	@param name		name of the variable to be added
	@param val		token type of the variable
	*/
	static void makeSpec(String name, int val)
	{
		specialVarTbl.put(Util.normalizeName(name), new Op(val));
	}


	// initialize table
	static
	{
		makeSpec("SI Weekly data date", tok.NOW_VAR);
	}

	abstract public void defineScreen(String screenm, OpItem screenDef);


	tok parser = new tok()
		{
			@Override
			int yylex()
			{
				try {
					return scan();

				} catch(IOException ex) {
					System.err.println("problem with input file: " + ex);
					return -1;
				}
			}

			@Override
			void parserDefineScreen(String screenm, OpItem screenDef)
			{
				defineScreen(screenm, screenDef);
			}

			@Override
			void yyerror(String msg)
			{
				System.err.println("" + (yyline+1) + ":" + (yycolumn+1) + ": ");
				System.err.println(msg);
				System.exit(1);
			}
		};

	int returnToken(int type)
	{
		parser.yylval = new Action(type);
		return type;
	}

	public void parse()
	{
		parser.yyparse();
	}

	static String stripWrapper(String s)
	{
		return s.substring(1, s.length()-1);
	}



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public RadisParser(java.io.Reader in) {
    this.zzReader = in;
  }


  /**
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 232) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int scan() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return 0; }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { yybegin(SKIP2NL);
            }
            // fall through
          case 77: break;
          case 2:
            {
            }
            // fall through
          case 78: break;
          case 3:
            { yybegin(YYINITIAL);
            }
            // fall through
          case 79: break;
          case 4:
            { parser.yyerror(": invalid character '" + yytext() + "'");
            }
            // fall through
          case 80: break;
          case 5:
            { /* skip blanks */
            }
            // fall through
          case 81: break;
          case 6:
            { parser.yylval = tok.IntCon(Integer.valueOf(yytext()));
			return parser.yylval.type();
            }
            // fall through
          case 82: break;
          case 7:
            { parser.yyerror(": '" + yytext() + "' is not a keyword");
            }
            // fall through
          case 83: break;
          case 8:
            { return returnToken(tok.MINUS);
            }
            // fall through
          case 84: break;
          case 9:
            { parser.yylval = tok.FloatCon(Double.valueOf(yytext()));
			return parser.yylval.type();
            }
            // fall through
          case 85: break;
          case 10:
            { return returnToken(tok.LPAREN);
            }
            // fall through
          case 86: break;
          case 11:
            { return returnToken(tok.RPAREN);
            }
            // fall through
          case 87: break;
          case 12:
            { return returnToken(tok.EQ);
            }
            // fall through
          case 88: break;
          case 13:
            { return returnToken(tok.LT);
            }
            // fall through
          case 89: break;
          case 14:
            { return returnToken(tok.GT);
            }
            // fall through
          case 90: break;
          case 15:
            { return returnToken(tok.PLUS);
            }
            // fall through
          case 91: break;
          case 16:
            { return returnToken(tok.TIMES);
            }
            // fall through
          case 92: break;
          case 17:
            { return returnToken(tok.DIV);
            }
            // fall through
          case 93: break;
          case 18:
            { return returnToken(tok.POW);
            }
            // fall through
          case 94: break;
          case 19:
            { return returnToken(tok.AMPER);
            }
            // fall through
          case 95: break;
          case 20:
            { return returnToken(tok.COMMA);
            }
            // fall through
          case 96: break;
          case 21:
            { return returnToken(tok.COLON);
            }
            // fall through
          case 97: break;
          case 22:
            { parser.yylval = tok.StrCon(stripWrapper(yytext()));
			return parser.yylval.type();
            }
            // fall through
          case 98: break;
          case 23:
            { parser.yylval = tok.FloatCon(Double.valueOf(yytext().substring(0, yytext().length()-1)) / 100.0);
			return parser.yylval.type();
            }
            // fall through
          case 99: break;
          case 24:
            { return returnToken(tok.IF);
            }
            // fall through
          case 100: break;
          case 25:
            { /* skip comments */
            }
            // fall through
          case 101: break;
          case 26:
            { return returnToken(tok.OR);
            }
            // fall through
          case 102: break;
          case 27:
            { return returnToken(tok.TO);
            }
            // fall through
          case 103: break;
          case 28:
            { return returnToken(tok.LE);
            }
            // fall through
          case 104: break;
          case 29:
            { return returnToken(tok.NEQ);
            }
            // fall through
          case 105: break;
          case 30:
            { return returnToken(tok.GE);
            }
            // fall through
          case 106: break;
          case 31:
            { String normvar = Util.normalizeName(stripWrapper(yytext()));
			parser.yylval = specialVarTbl.get(normvar);

			if(parser.yylval == null) {
				parser.yylval = new StrToken(tok.VAR, normvar);
			}

			return parser.yylval.type();
            }
            // fall through
          case 107: break;
          case 32:
            { parser.yylval = new StrToken(tok.SCRNM, stripWrapper(yytext()));
			return parser.yylval.type();
            }
            // fall through
          case 108: break;
          case 33:
            { yybegin(SKIP2NL);
			return returnToken(tok.END);
            }
            // fall through
          case 109: break;
          case 34:
            { return returnToken(tok.NOT);
            }
            // fall through
          case 110: break;
          case 35:
            { return returnToken(tok.NOW);
            }
            // fall through
          case 111: break;
          case 36:
            { return returnToken(tok.SET);
            }
            // fall through
          case 112: break;
          case 37:
            { return returnToken(tok.SUM);
            }
            // fall through
          case 113: break;
          case 38:
            { return returnToken(tok.SOS);
            }
            // fall through
          case 114: break;
          case 39:
            { return returnToken(tok.LENGTH);
            }
            // fall through
          case 115: break;
          case 40:
            { return returnToken(tok.ADD);
            }
            // fall through
          case 116: break;
          case 41:
            { return returnToken(tok.AND);
            }
            // fall through
          case 117: break;
          case 42:
            { return returnToken(tok.ABS);
            }
            // fall through
          case 118: break;
          case 43:
            { return returnToken(tok.PAD);
            }
            // fall through
          case 119: break;
          case 44:
            { return returnToken(tok.TOP);
            }
            // fall through
          case 120: break;
          case 45:
            { return returnToken(tok.MID);
            }
            // fall through
          case 121: break;
          case 46:
            { return returnToken(tok.MIN);
            }
            // fall through
          case 122: break;
          case 47:
            { return returnToken(tok.MAX);
            }
            // fall through
          case 123: break;
          case 48:
            { parser.yylval = tok.IntCon(Integer.valueOf(yytext().substring(1,yytext().indexOf('-'))));
			return parser.yylval.type();
            }
            // fall through
          case 124: break;
          case 49:
            { return returnToken(tok.USES);
            }
            // fall through
          case 125: break;
          case 50:
            { return returnToken(tok.SIGN);
            }
            // fall through
          case 126: break;
          case 51:
            { return returnToken(tok.SORT);
            }
            // fall through
          case 127: break;
          case 52:
            { return returnToken(tok.LEFT);
            }
            // fall through
          case 128: break;
          case 53:
            { return returnToken(tok.LAST);
            }
            // fall through
          case 129: break;
          case 54:
            { return returnToken(tok.KEEP);
            }
            // fall through
          case 130: break;
          case 55:
            { return returnToken(tok.WITH);
            }
            // fall through
          case 131: break;
          case 56:
            { parser.yylval = new StrToken(tok.AGGVAR, Util.normalizeName(stripWrapper(stripWrapper(yytext()))));
			return parser.yylval.type();
            }
            // fall through
          case 132: break;
          case 57:
            { return returnToken(tok.FIRST);
            }
            // fall through
          case 133: break;
          case 58:
            { return returnToken(tok.SCORE);
            }
            // fall through
          case 134: break;
          case 59:
            { return returnToken(tok.BLANK);
            }
            // fall through
          case 135: break;
          case 60:
            { return returnToken(tok.PRINT);
            }
            // fall through
          case 136: break;
          case 61:
            { return returnToken(tok.RIGHT);
            }
            // fall through
          case 137: break;
          case 62:
            { return returnToken(tok.COUNT);
            }
            // fall through
          case 138: break;
          case 63:
            { return returnToken(tok.MATCH);
            }
            // fall through
          case 139: break;
          case 64:
            { yybegin(DEFINITION);
				return returnToken(tok.DEFINE);
            }
            // fall through
          case 140: break;
          case 65:
            { return returnToken(tok.DEFINE);
            }
            // fall through
          case 141: break;
          case 66:
            { return returnToken(tok.UNIQUE);
            }
            // fall through
          case 142: break;
          case 67:
            { return returnToken(tok.CREATE);
            }
            // fall through
          case 143: break;
          case 68:
            { return returnToken(tok.MEDIAN);
            }
            // fall through
          case 144: break;
          case 69:
            { return returnToken(tok.DEBLANK);
            }
            // fall through
          case 145: break;
          case 70:
            { return returnToken(tok.AVERAGE);
            }
            // fall through
          case 146: break;
          case 71:
            { return returnToken(tok.OVERLAP);
            }
            // fall through
          case 147: break;
          case 72:
            { return returnToken(tok.REPLACE);
            }
            // fall through
          case 148: break;
          case 73:
            { return returnToken(tok.ADDNOPAD);
            }
            // fall through
          case 149: break;
          case 74:
            { return returnToken(tok.PLUSTIES);
            }
            // fall through
          case 150: break;
          case 75:
            { return returnToken(tok.ASCENDING);
            }
            // fall through
          case 151: break;
          case 76:
            { return returnToken(tok.DESCENDING);
            }
            // fall through
          case 152: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
